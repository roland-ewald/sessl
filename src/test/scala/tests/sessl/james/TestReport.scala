package tests.sessl.james

import sessl.util.MiscUtils
import java.io.File
import org.junit.Test
import org.junit.Assert._

/** Tests report creation.
 *  @author Roland Ewald
 */
@Test class TestReport {

  @Test def testReporting() = {

    import sessl._
    import sessl.james._

    val exp = new Experiment with Instrumentation with Report with ParallelExecution {

      model = TestJamesExperiments.testModel
      stopTime = 0.5
      replications = 10
      bind("x" ~ "S0", "y" ~ "S1")
      observePeriodically(range(0.0, 0.05, 0.5))

      //Some reporting: 
      reportName = "My SESSL Test Report"
      reportDescription = "This was generated by the James II 'Report' trait in Sessl."

      withRunResult {
        results =>
          {
            reportSection("From run " + results.id) {
              linePlot(results ~ ("x"), results ~ ("y"))(title = "The trajectories of x and y!")
            }
          }
      }

      withExperimentResult {
        results =>
          {
            reportSection("My test section") {
              reportSection("Test-Section sessl-A") {
                scatterPlot(results ~ ("x"), results ~ ("y"))(yLabel = "sessl-label for y-axis", caption = "This is a sessl figure.")
              }
              reportSection("Test-Section sessl-B") {
                histogram(results ~ ("x"))(title = "A fancy histogram.")
                boxPlot(results ~ ("x"), results ~ ("y"))(title = "A boxplot (with named variables)")
                boxPlot(results("x"), results("y"))(title = "Another boxplot (without names)")
                reportStatisticalTest(results ~ ("x"), results ~ ("y"))()
                reportTable(results ~ ("x"), results ~ ("y"))(caption = "This is a table")
              }
            }
          }
      }
    }

    //Best-effort deletion, don't check result (some open programs like R may prevent the deletion of ALL files...)
    MiscUtils.deleteRecursively(exp.reportName)
    val rawDataDir = new File(exp.reportName + "/raw")
    assertFalse("Directory containing raw data should have been deleted.", rawDataDir.exists)

    execute(exp)

    assertTrue("After execution, a directory for raw data should exist.", rawDataDir.exists)
    val files = new File(exp.reportName).list.toSet
    assertTrue("The directory for raw data, the auxiliary plotting methods, and the report itself should be there", files("raw") && files("plotting.R") && files("report.Rtex"))
    val dataFiles = rawDataDir.listFiles
    assertTrue("There should be some files containing the raw data, and none of them should be empty.", dataFiles.length > 0 && dataFiles.forall(_.length > 0))
  }

}