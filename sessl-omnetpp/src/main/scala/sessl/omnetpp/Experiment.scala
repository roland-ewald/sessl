package sessl.omnetpp

import sessl.AbstractExperiment
import java.io.File
import java.io.FileWriter
import sessl.AfterSimTime
import sessl.AfterWallClockTime
import sessl.StoppingCondition
import sessl.DisjunctiveStoppingCondition

/** Integrates OMNeT++ 4.2 (http://www.omnetpp.org/) by producing <code>omnetpp.ini</code> files.
 *  @author Roland Ewald
 */
class Experiment extends AbstractExperiment {

  /** The default file header. */
  val fileHeader = "#\n# This file was automatically generated by SESSL. Do NOT edit manually.\n#\n\n[General]"

  /** The file to which the experiment configuration is written. */
  var expConfFileName = "omnetpp.ini"

  /** The working directory. */
  private[this] var workingDirectory: Option[File] = None

  /** The file writer for the experiment configuration. */
  private[this] var fileWriter: Option[FileWriter] = None

  /** Generates the corresponding omnetpp.ini file. */
  def basicConfiguration(): Unit = {
    initializeExperimentConfigFile()
    configureModel()
    configureStopping()
    configureFixedVariables()
    fileWriter.get.close
  }

  /** Initializes the experiment configuration file. */
  def initializeExperimentConfigFile(): Unit = {
    //Check model file
    val modelFile = new File(modelLocation.get)
    require(modelFile.exists && modelFile.isFile && modelFile.canExecute, "File '" + modelFile.getAbsolutePath + "' not found or not executable (permissions OK?).")

    //Initialize experiment configuration file
    workingDirectory = Some(modelFile.getParentFile)
    val expConfFile = new File(workingDirectory.get.getAbsolutePath + File.separator + expConfFileName)
    if (expConfFile.exists)
      require(expConfFile.delete, "Could not delete previous experiment configuration file: '" + expConfFile.getAbsolutePath + "'.")
    fileWriter = Some(new FileWriter(expConfFile, false))
    write(fileHeader)
  }

  /** Configure the model to be simulated. */
  def configureModel(): Unit = {
    write("network", modelLocation.get)
  }

  /** Configure stop condition. */
  def configureStopping(): Unit = {
    writeStoppingCondition(checkAndGetStoppingCondition())
  }

  /** Writes a stopping condition into the next line. */
  def writeStoppingCondition(c: StoppingCondition): Unit = {
    c match {
      case st: AfterSimTime => write("sim-time-limit", st.asMilliSecondsOrUnitless + "ms")
      case wct: AfterWallClockTime => write("cpu-time-limit", wct.asMilliSecondsOrUnitless + "ms")
      case or: DisjunctiveStoppingCondition => {
        writeStoppingCondition(or.left)
        writeStoppingCondition(or.right)
      }
      case x => throw new IllegalArgumentException("Stopping criterion '" + c + "' not supported.")
    }
  }

  /** Configures all fixed variables. */
  def configureFixedVariables(): Unit = {
    fixedVariables.foreach(writeVariableDefinition)
  }

  /** Writes a variable definition. */
  def writeVariableDefinition(element: (String, AnyRef)): Unit = {
    write(element._1, variableValueAsString(element._2))
  }

  /** Returns string representation of a value. */
  def variableValueAsString(value: AnyRef): String = {
    value match {
      case str: String => "\"" + str + "\""
      case x => x.toString()
    }
  }

  /** Executes OMNeT++ experiment. */
  def executeExperiment(): Unit = {
    //TODO
  }

  /** Alias for brevity. */
  private[this] def write(content: String): Unit = fileWriter.get.write(content + '\n')

  /** Alias for brevity. */
  private[this] def write(key: String, value: String): Unit = write(key + " = " + value)
}